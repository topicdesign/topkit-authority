topkit Authority Module
=======================================

Authority is a simple permission-checking library that can be used in your application for access 
control. Authority uses Permissions and Roles to establish rules to determine a user's level of access to some resource.

Basic Usage
-----------

### can() ###

`can()` is a helper function that accepts two parameters.  The first parameter should be the action the 
current user is trying to perform, such as `read`, `create`, `delete`.  The second parameter may be either 
an object or a class name for the resource the current user wants to access, such as `Post`, or `Comment`.
Authority knows who the current user is internally upon instantiation of the library via default or custom configuration.

An example of this use in a view:

```php
<p>Here is my awesome text blah blah blah</p>
<!-- $secret is of type Secret -->

<?php if (can('read', $secret)): ?>
    <p><?php echo $secret->message ?></p>
<?php endif ?>

<?php if (can('update', $secret)): ?>
    <p><?php echo anchor("secrets/edit/{$secret->id}", 'Click to edit an awesome secret') ?></p>
<?php endif ?>
```

### cannot() ###

`cannot()` is the negative of `can()` and accepts the same parameters.

Permissions
-----------

Permissions outline specific rules for accessing particular resources. These are represented 
using the `Authority\Permission` model. The `data` property of a permission is accessed as an array
in your application and stored in the database as a JSON string. Each entry in this array references
a resources and which actions this permission allows or denies. All unspecified actions are considered restricted.

Here is an example permission:

```php
$permission->data = array(
    'article'   => array(
        'read'      => TRUE, 
        'update'    => TRUE, 
        'delete'    => FALSE,
    ),
    'user'      => 'manage',
);
```

`manage` is an alias meaning full permissions.

Roles
-----

Roles can be useful when applying permissions to a group of users.

### Creating new roles ###

Roles are created in the `roles.php` config file. Each role is represented as an array that specifies its permissions. 
Authority will take care of adding roles to the database as necessary.

Here is a sample role config showing an "admin" role and a "blog admin" role:

```php
$config['roles'] = array(
    'admin'         => array(
        'article'   => 'manage',
        'user'      => 'manage'
    ),
    'blog_admin'    => array(
        'article'   => array(
            'create' => TRUE,
            'update' => TRUE,
        )
    ),
);
```

### Users and roles ###

The functions `grant_role()` and `remove_role()` are used to add and remove a role from a user. Both accept the same
two parameters. The first is the title of the role to add or remove, and the second is the user to act on. If no user
is specified, the currently logged in user is assumed.

Here is an example of how this is used:

```php
$user = new User();

// give the user admin permissions
grant_role('admin', $user);

// removing admin permissions from the user
remove_role('admin', $user);
```
